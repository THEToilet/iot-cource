= 環境構築
この章ではESP32を利用するために必要な環境構築手順を紹介します。
本誌は、Windows環境を想定しているので、Mac環境の方は少々が違う点がある可能性があります。

== ESP32とは
ESP32とは
Espressif Systems社が開発したSoC(System on a Chip)シリーズの名前です。
ESP32という名前の使われ方には様々あり、今回使用するESP32DevKitC（@<img>{esp32}）はESP32をユーザが利用しやすい形にした製品ですが、
通称としてESP32と呼ばれることもあります。そこで、本誌ではESP32DevKitCも含めてESP32と呼んでいます。

BluetoothやWiFiモジュールがついている

//image[esp32][ESP32DevKit-C][scale=0.8]{
//}

== ESP32の開発環境

ESP32の開発環境としては主に以下の3つがあげられます。

 * Arduino IDE
 ** Arduino用IDE 
 * ESP-IDF
 ** ESP32純正IDE
 * MicroPython
 ** Pythonで書ける

今回は利用者が多く、関連情報がネット上に多く見られるArduino IDEを用いて開発を進めていきたいと思います。

== Arduino IDEのインストール

Arduino IDEをインストールするために以下のリンクにアクセスしてください@<br>{}
@<href>{https://www.arduino.cc/en/software}@<br>{}
ダウンロード画面（@<img>{1}）ではご自身のPC環境にあったダウンロードリンクを選択してください。
ここからの手順では、Windows10でのダウンロードを想定しています。

//image[1][ArduinoIDEのダウンロード画面][scale=0.8]{
//}

ダウンロードリンクにアクセスすると、寄付金の金額選択画面に遷移します（@<img>{2}）。
可能であれば寄付もできますが、@<strong>{JUST DOWNLOD}を選択することで次の画面に遷移します。

//image[2][寄付金の金額選択画面][scale=0.8]{
//}

@<strong>{JUST DOWNLOD}を選択するとブラウザ内でMicorsoftStoreの画面に遷移します（@<img>{3}）。
つぎは@<strong>{入手}を選択すると、ブラウザのポップアップにでWindows側でMicrosoftStoreを開く許可を求められるので許可をしてください。

//image[3][ブラウザで見るMicorosoftStore][scale=0.8]{
unko
//}

Windows上のMicrosoftStoreです（@<img>{4}）。再度、@<strong>{入手}を選択してください。

//image[4][Windowsで開いたMicrosoftStore][scale=0.8]{
//}

サインインについて尋ねられますが（@<img>{5}）、@<strong>{必要ありません}を選択した場合もダウンロードは開始されます。

//image[5][サインインの確認画面][scale=0.8]{
//}

@<img>{6}ではArduino IDEのダウンロード状況を確認できます。

//image[6][ダウンロードのキュー画面][scale=0.8]{
//}

ダウンロードが完了した後、検索窓にてArduino IDEを検索し開いてください（@<img>{7}）。

//image[7][ArduinoIDEの検索][scale=0.8]{
//}

この際、セキュリティについての許可を求められるので（@<img>{8}）@<strong>{アクセスを許可する}を選択すると、ブラウザのポップアップにでWindows側でMicrosoftStoreを開く許可を求められるので許可をしてください。

//image[8][セキュリティの確認画面][scale=0.8]{
//}

Arduino IDEが起動すると、デフォルトの画面が表示されます（@<img>{9}）。

//image[9][デフォルトのスケッチ画面][scale=0.8]{
//}

== ESP32用ボードマネージャーのインストール
Arduino IDEにてESP32を使うために必要なボードマネージャーのインストールの流れを紹介します。@<br>{}
@<img>{10}はESP32のボードマネージャーを追加するための手順であり、以下のリンクに記載されています。
@<href>{https://github.com/espressif/arduino-esp32/blob/master/docs/arduino-ide/boards_manager.md}@<br>{}
//image[10][ESP32をArduinoIDEで使うための設定][scale=0.8]{
//}
手順に従い以下のリンクをコピーしてください。以下のリンクには、@<img>{11}のような情報が記載されています。
//list[esp32-board-link][ボードマネージャーのリンク]{
@<href>{https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json}
//}
//image[11][ESP32用のボードマネージャ情報][scale=0.8]{
//}
Arduino IDE側では、ファイル＞環境設定を選択してください（@<img>{12}）。
//image[12][環境設定を選択][scale=0.8]{
//}
環境設定の画面が表示されていることを確認してください（@<img>{13}）。
//image[13][環境設定の画面][scale=0.8]{
//}
次に先ほどコピーした@<list>{esp32-board-link}を@<strong>{追加ボードマネージャーのURL}の欄にペーストしてください（@<img>{14}）。
//image[14][追加ボードマネージャーのURLに貼り付ける][scale=0.8]{
//}
その後、@<strong>{OK}を選択してください。

== ESP32用ライブラリのインストール
次にESP32用のライブラリをArduino IDEにインストールします。

@<img>{15}のように スケッチ＞ライブラリのインクルード＞ライブラリを管理 を選択してください。
//image[15][ライブラリの管理の選択][scale=0.8]{
//}
次に、検索窓にesp32と入力しでてきたesp32ライブラリをインストールしてください（@<img>{16}）。
//image[16][ESP32用ライブラリのインストール][scale=0.8]{
//}

== Hello ESP32!!
ここで動作確認をするためにプログラミングでは定番のHello WorldをESP32でもやってみましょう。

=== プログラムの記述
HelloWorldを実行するため、新しくファイルを作成します。
ファイル＞新規ファイル　を選択してください（@<img>{20}）。
//image[20][新規ファイルの作成][scale=0.8]{
//}
ファイルエクスプローラーが開かれるので、ファイル名にhelloworldと入力して保存してください（@<img>{21}）。
//image[21][新規ファイルの名前決定][scale=0.8]{
//}
完了すると@<img>{22}のような画面が開きます。
//image[22][新規ファイル作成完了画面][scale=0.8]{
//}

つぎに、@<list>{helloworld}を参考にして@<img>{23}のようにプログラムを記述してください。
//list[helloworld][HelloWolrd]{
void setup() { 
  Serial.begin(115200); 
} 

void loop() { 
  Serial.println("Hello,World"); 
  delay(3000); 
}
//} 
//image[23][helloworldのプログラムを記述][scale=0.8]{
//}

==== プログラムの説明
ここで、先ほど記述したプログラムの説明をします。
まず、ESP32のプログラムは大枠として
 * setup()
 * loop()

 * Serial.begin(115200);
 * Serial.println("Hello,World"); 
 * delay(3000);
 
=== ブレッドボード
これからの動作確認のためにESP32をブレッドボードにさしましょう。
そこで、まずブレッドボードの説明をします。

ブレッドボードとは、電子回路のプロトタイプを組む際によく使われます。
ブレッドボードにさした部品は再利用できるため、いろいろな回路を試すことができます。
ブレッドボードの特徴@<img>{breadboard}のように、回路的につながっている部分とつながっていない
部分に分かれているところがあります。
最初は、このつながっている部分を忘れて、ショートしてしまう回路を作ってしまうことがあるので、注意してください。
//image[breadboard][ブレッドボード][scale=0.8]{
//}

=== PCとの接続
つぎに、ESP32をPCと接続します。まず画像のように
microUSB Type-BをESP32とPCの間に接続してください。
デバイスマネージャーをつかって（@<img>{18}）、ESP32がつながっているポート番号を調べます。
//image[18][デバイスマネージャーの検索][scale=0.8]{
//}
ESP32はという名前でありCOM3につながっていることがわかります(@<img>{19}）。
//image[19][ESP32の接続ポートを調べる][scale=0.8]{
//}

設定の確認

=== プログラムの書き込み
//image[24][ESP32にプログラムを書き込む][scale=0.8]{
//}
//image[25][コンソール画面][scale=0.8]{
//}

=== 動作確認
//image[26][シリアルモニタの選択][scale=0.8]{
//}
//image[27][helloworldの表示成功][scale=0.8]{
//}

==[column] シリアル通信とは
 他のコンピュータやデバイスと通信するために、どのボードにも最低1つのシリアルポートが用意されています。ピン0と1がシリアルポートのピンで、この2ピンを通信に使用する場合、デジタル入出力として使うことはできません。
  ArduinoIDEはシリアルモニタを備えていて、Arduinoとコミュニケーションすることができます。
  https://thinkit.co.jp/story/2015/04/15/5791
  シリアル通信って何？
  　シリアルポートにはデータを送信するTxDという端子と，データを受信するRxDという端子がある
  　双方向に通信できる
  　シリアル伝送においてもっとも基本的な処理は，シリアルとパラレルの変換
  　コンピュータから例として1byteのデータをシリアル伝送する場合，パラレルーシリアル変換という処理を行い，コンピュータ内部でパラレル伝送されているデータをシリアル形式に変換する必要がある
  　データを送る速度
				シリアル伝送では、1秒あたり何ビットを送るか（bps）という形で通信速度を示します。具体的には、前述したシフト処理を行う速さということになります。送信速度と受信速度が一致していなければ、送信したデータを受信側で正しく組み立てることはできません。